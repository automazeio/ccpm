{
  "permissions": {
    "allow": [
      "Bash(python -m pytest tests/ -v)",
      "Bash(markdownlint:*)",
      "Bash(python -m pytest tests/integration/test_documentation_quality.py::TestLinkValidation::test_all_links_accessible tests/integration/test_permission_compliance.py::TestSecurityValidation::test_repository_references -v)",
      "Bash(python -m pytest tests/integration/test_documentation_quality.py::TestMarkdownQuality::test_readme_passes_all_lint_rules tests/integration/test_documentation_quality.py::TestLinkValidation::test_all_links_accessible tests/integration/test_permission_compliance.py::TestSecurityValidation::test_repository_references -v)",
      "Bash(python -m pytest tests/ -x -q)",
      "Bash(python -m black:*)",
      "Bash(python -m pytest tests/integration/test_documentation_quality.py::TestLinkValidation::test_all_links_accessible -v)",
      "Bash(python -m isort:*)",
      "Bash(python -m flake8:*)",
      "Bash(python:*)",
      "Bash(git checkout:*)",
      "Bash(gh run watch:*)",
      "Bash(git add:*)",
      "Bash(gh run view:*)",
      "Bash(gh run list:*)",
      "Bash(git merge:*)",
      "Bash(pip install build)",
      "Bash(pip install ccpm)",
      "Bash(pip install -e .)",
      "Bash(pip install git+https://github.com/automazeio/ccpm.git)",
      "Bash(ccpm setup:*)",
      "Bash(ccpm update:*)",
      "Bash(git commit:*)",
      "Bash(ccpm clean:*)",
      "Bash(cat:*)",
      "Bash(echo $SHELL)",
      "Bash(git push:*)",
      "Bash(grep:*)",
      "Bash(git stash:*)",
      "Bash(gh:*)",
      "WebFetch(domain:cli.github.com)",
      "Read(//private/tmp/test-ccpm-install/.claude/**)",
      "Bash(chmod:*)",
      "Bash(bash:*)",
      "Bash(find:*)",
      "Read(//Users/jmanning/**)",
      "Bash(ruff check:*)",
      "WebSearch",
      "Bash(.claude/scripts/debug-wrapper.sh:*)",
      "Read(//tmp/**)",
      "Bash(/Users/jmanning/ccpm/.claude/scripts/pm/status.sh:*)",
      "Bash(../tests/bash_freezing/test_core.sh)",
      "Bash(RUN_ONCE=true .claude/scripts/health-check.sh --once)",
      "Bash(.claude/scripts/pm/status.sh:*)",
      "Bash(echo \"Exit code: $?\")",
      "Bash(export RUN_ONCE=true)",
      "Bash(.claude/scripts/health-check.sh:*)",
      "Bash(TIMEOUT_SECONDS=5 MAX_OUTPUT_LINES=50 .claude/scripts/debug-wrapper.sh .claude/scripts/pm/status.sh)",
      "Bash(export TIMEOUT_SECONDS=5 MAX_OUTPUT_LINES=50)",
      "Bash(for script in status standup blocked next)",
      "Bash(do echo \"Testing $script.sh:\")",
      "Bash(.claude/scripts/pm/:*)",
      "Bash(done)",
      "Bash(CCPM_MIN_TASK_CONTENT=200 bash -c 'source /Users/jmanning/ccpm/ccpm/claude_template/scripts/utils.sh && min=$(get_min_content_length \"\"task:test\"\") && echo \"\"Task minimum with CCPM_MIN_TASK_CONTENT=200: $min\"\"')",
      "Bash(for issue in 16 17 18)",
      "Bash(do gh issue view $issue --json number,title,state)",
      "Bash(echo:*)",
      "Bash(for cmd in epic-sync issue-sync prd-new)",
      "Bash(head:*)",
      "WebFetch(domain:docs.pytest.org)",
      "Bash(do echo \"Issue #$issue:\")",
      "Bash(while gh run view 17745662437 --json status)",
      "Bash(do echo \"Waiting...\")",
      "Bash(while gh run view 17746003184 --json status)",
      "Bash(do sleep:*)",
      "Bash(/Users/jmanning/ccpm/.claude/scripts/pm/in-progress.sh:*)",
      "Bash(column:*)",
      "WebFetch(domain:github.com)",
      "Bash(/Users/jmanning/ccpm/.claude/scripts/pm/prd-status.sh:*)",
      "WebFetch(domain:api.github.com)",
      "Bash(unzip:*)",
      "Bash(sed:*)",
      "Bash(timeout:*)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/tmp/ccpm"
    ]
  }
}